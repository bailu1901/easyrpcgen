using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CodeGenerator;
using Humanizer;


public static partial class  CSharpCodeGenerator
{
	public static void ClientInterfaceReaction(TextWriter writer, string ClassName, string interfaceName, string prefix, List<Function> Functions)
	{
		writer.WriteLine("// Generated by the rpc compiler.  DO NOT EDIT!");
		writer.WriteLine("using System;");
		writer.WriteLine("using System.Collections;");
		writer.WriteLine("using System.Collections.Generic;");
		writer.WriteLine("using Network;");
		writer.WriteLine("using ProtoBuf;");
		writer.WriteLine("using DataContract;");
		writer.WriteLine();

		writer.WriteLine("");
		writer.WriteLine("public static partial class " + ClassName);
		writer.WriteLine("{");
		writer.WriteLine("\tpublic static void RegisterFunctionImpl(" + interfaceName + " service)");
		writer.WriteLine("\t{");

		foreach (Function current in Functions)
		{
			//writer.Write(CreateCSharpComment("        ", current.Comment));

			writer.WriteLine("\t\tPackageDispatcher.RegisterFunction(" + current.Id + ", (conn, desc, s) =>");
			writer.WriteLine("\t\t{");

			writer.WriteLine("\t\t\tvar arg = Serializer.Deserialize<" + Utility.GetArgType(prefix,current) + ">(s);");

			var args = "(conn";
			foreach (var argument in current.Args)
			{
				args += ", arg." + argument.Name.Pascalize();
			}
			args += ")";


			writer.WriteLine("\t\t\tservice." + current.FunctionName + args + ";");
			
			
			writer.WriteLine("\t\t});");
			writer.WriteLine();	
		}
		writer.WriteLine("\t}");
		writer.WriteLine("}");
	}

}

