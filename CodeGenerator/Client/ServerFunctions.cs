using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CodeGenerator;
using Humanizer;


public static partial class  CSharpCodeGenerator
{
	public static void ServerFunctions(TextWriter writer, string ClassName,string prefix, List<Function> Functions)
	{
		writer.WriteLine("// Generated by the rpc compiler.  DO NOT EDIT!");
		writer.WriteLine("using System;");
		writer.WriteLine("using System.Collections;");
		writer.WriteLine("using System.Collections.Generic;");
		writer.WriteLine("using Network;");
		writer.WriteLine("using ProtoBuf;");
		writer.WriteLine("using DataContract;");
		writer.WriteLine();
		//writer.WriteLine("namespace " + "Watcher");
		//writer.WriteLine("{");
		writer.WriteLine("");
		writer.WriteLine("public static partial class " + ClassName);
		writer.WriteLine("{");

		foreach (Function current in Functions)
		{
			writer.Write(Utility.CreateCSharpComment("\t", current.Comment));

			bool hasReturnValue = (0 != current.RetType.CompareTo("void"));
			var retVal = hasReturnValue ? "NetworkPacketCoroutine<" + Utility.GetRetType(prefix,current) + "> " : "void ";
			var fun = "\tpublic static " +
				retVal +
				current.FunctionName;
			
			var args = "(IConnection conn";
			foreach (var argument in current.Args)
			{
				args += ", " + TypeDef.ConvertProtoType2CSType(argument.Type) + " " + argument.Name;
			}
			args += ")";
			writer.WriteLine(fun + args);
			writer.WriteLine("\t{");

			

			if (hasReturnValue)
			{
				writer.WriteLine("\t\tvar packageId = PackageDispatcher.GetNextPackageId();");
				writer.WriteLine("\t\tvar cor = new " + retVal + "(() =>{ PackageDispatcher.UnregisterPackage(packageId); });");

				writer.WriteLine("\t\tPackageDispatcher.RegisterPackage(packageId, (c, d, s) =>");
				writer.WriteLine("\t\t{");
				writer.WriteLine("\t\t\tvar reply = Serializer.Deserialize<" + Utility.GetRetType(prefix,current) + ">(s);");
				writer.WriteLine("\t\t\tcor.SetResponse(d.Error,reply);");
				writer.WriteLine("\t\t\tPackageDispatcher.UnregisterPackage(packageId);");
				
				writer.WriteLine("\t\t});");
				writer.WriteLine();
			}
			

			writer.WriteLine("\t\tServiceDesc desc = new ServiceDesc();");
			writer.WriteLine("\t\tdesc.FuncId = " + current.Id + ";");
			writer.WriteLine("\t\tdesc.Type = " + 1 + ";");
			if (hasReturnValue)
			{
				writer.WriteLine("\t\tdesc.PacketId = packageId;");
			}
			if (current.Args.Count > 0)
			{
				writer.WriteLine("\t\tvar arg = new " + Utility.GetArgType(prefix, current) + "();");
				foreach (var argument in current.Args)
				{
					writer.WriteLine("\t\targ." + argument.Name.Pascalize() + " = " + argument.Name + ";");
				}

				writer.WriteLine("\t\tconn.Send(desc, arg);");
			}
			else
			{
				writer.WriteLine("\t\tconn.Send(desc, null);");
			}

			writer.WriteLine();
			if (hasReturnValue)
			{
				writer.WriteLine("\t\treturn cor;");
			}

			writer.WriteLine("\t}");
			writer.WriteLine();

			

		}
		writer.WriteLine("}");
	}

	public static void ServerFunctions2(TextWriter writer, string ClassName, string prefix, List<Function> Functions)
	{
		writer.WriteLine("// Generated by the rpc compiler.  DO NOT EDIT!");
		writer.WriteLine("using System;");
		writer.WriteLine("using System.Collections;");
		writer.WriteLine("using System.Collections.Generic;");
		writer.WriteLine("using Network;");
		writer.WriteLine("using ProtoBuf;");
		writer.WriteLine("using DataContract;");
		writer.WriteLine();
		//writer.WriteLine("namespace " + "Watcher");
		//writer.WriteLine("{");
		writer.WriteLine("");
		writer.WriteLine("public static partial class " + ClassName);
		writer.WriteLine("{");

		foreach (Function current in Functions)
		{
			writer.Write(Utility.CreateCSharpComment("\t", current.Comment));

			bool hasReturnValue = (0 != current.RetType.CompareTo("void"));
			var retVal = hasReturnValue ? "NetworkPacketCoroutine<" + Utility.GetRetType(prefix, current) + "> " : "void ";
			var fun = "\tpublic static " +
				retVal +
				current.FunctionName;

			var args = "(IConnection conn";
			foreach (var argument in current.Args)
			{
				args += ", " + TypeDef.ConvertProtoType2CSType(argument.Type) + " " + argument.Name;
			}
			args += ")";
			writer.WriteLine(fun + args);
			writer.WriteLine("\t{");



			if (hasReturnValue)
			{
				writer.WriteLine("\t\tvar packageId = PackageDispatcher.GetNextPackageId();");
				writer.WriteLine("\t\tvar cor = new " + retVal + "(() =>{ PackageDispatcher.UnregisterPackage(packageId); });");

				writer.WriteLine("\t\tPackageDispatcher.RegisterPackage(packageId, (c, d, s) =>");
				writer.WriteLine("\t\t{");
				writer.WriteLine("\t\t\tvar reply = Serializer.Deserialize<" + Utility.GetRetType(prefix, current) + ">(s);");
				writer.WriteLine("\t\t\tcor.SetResponse(d.Error,reply);");
				writer.WriteLine("\t\t\tPackageDispatcher.UnregisterPackage(packageId);");

				writer.WriteLine("\t\t});");
				writer.WriteLine();
			}


			writer.WriteLine("\t\tServiceDesc desc = new ServiceDesc();");
			writer.WriteLine("\t\tdesc.FuncId = " + current.Id + ";");
			if (hasReturnValue)
			{
				writer.WriteLine("\t\tdesc.PacketId = packageId;");
			}

			writer.WriteLine("\t\tvar arg = new " + Utility.GetArgType(prefix, current) + "();");
			foreach (var argument in current.Args)
			{
				writer.WriteLine("\t\targ." + argument.Name.Pascalize() + " = " + argument.Name + ";");
			}

			writer.WriteLine("\t\tconn.Send(desc, arg);");

			writer.WriteLine();
			if (hasReturnValue)
			{
				writer.WriteLine("\t\treturn cor;");
			}

			writer.WriteLine("\t}");
			writer.WriteLine();



		}
		writer.WriteLine("}");
	}

}

