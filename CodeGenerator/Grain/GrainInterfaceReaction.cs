using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CodeGenerator;
using Humanizer;


public static partial class  CSharpCodeGenerator
{
	public static void GrainInterfaceReaction(TextWriter writer, string ClassName, string InterfaceName, string prefix, string fileName, List<Function> Functions)
	{
		writer.WriteLine("// Generated by the rpc compiler.  DO NOT EDIT!");
		writer.WriteLine("using System;");
		writer.WriteLine("using System.Collections;");
		writer.WriteLine("using System.Threading.Tasks;");
		writer.WriteLine("using System.Collections.Generic;");
		writer.WriteLine("using Orleans;");
		writer.WriteLine("using ProtoBuf;");
		writer.WriteLine("using DataContract;");
		writer.WriteLine("using Network;");
		writer.WriteLine();
		writer.WriteLine("namespace " + "GrainInterface");
		writer.WriteLine("{");
		writer.WriteLine("");
		writer.WriteLine("    partial class " + ClassName);
		writer.WriteLine("    {");
		writer.WriteLine("\t\tpublic static void RegisterFunctionImpl" + fileName + "(PackageDispatcher dispatcher)");
		writer.WriteLine("\t\t{");

		foreach (Function current in Functions)
		{
			//writer.Write(CreateCSharpComment("        ", current.Comment));

			bool hasReturnValue = (0 != current.RetType.CompareTo("void"));
			writer.WriteLine("\t\t\tdispatcher.RegisterFunction(" + current.Id + (",async") + " (c, d, s) =>");
			writer.WriteLine("\t\t\t{");

			writer.WriteLine("\t\t\t\ttry");
			writer.WriteLine("\t\t\t\t{");

			if (current.Args.Count > 0)
			{
				writer.WriteLine("\t\t\t\tvar arg = Serializer.Deserialize<" + Utility.GetArgType(prefix, current) + ">(s);");	
			}
			

			/*
			var args = "(c";
			foreach (var argument in current.Args)
			{
				args += ", arg." + argument.Name.Pascalize();
			}
			args += ")";
			*/
			var args = "(" + current.ArgString("arg") + ")";
			

			if (hasReturnValue)
			{
				
				writer.WriteLine("\t\t\t\tvar reply = new " + Utility.GetRetType(prefix,current) + "();");
				writer.WriteLine("\t\t\t\tvar " + InterfaceName.ToLower() + " = GrainClient.GrainFactory.GetGrain<" + InterfaceName + ">((long)c.UserData);");
				writer.WriteLine("\t\t\t\tvar ret = await " + InterfaceName.ToLower() + "." + current.FunctionName + args + ";");
				writer.WriteLine("\t\t\t\treply.ReturnValue = ret.ReturnValue;");

				writer.WriteLine("\t\t\t\td.Error = ret.ErrorCode;");


				//writer.WriteLine("\t\t\t\td.Error = ret.ErrorCode;");
				writer.WriteLine("\t\t\t\td.Type = 2;");
				writer.WriteLine("\t\t\t\tc.Send(d, reply);");
	
				//writer.WriteLine("\t\t\t\tservice." + current.FunctionName + args + ";");
			}
			else
			{
				writer.WriteLine("\t\t\t\tvar " + InterfaceName.ToLower() + " = GrainClient.GrainFactory.GetGrain<" + InterfaceName + ">((long)c.UserData);");
				writer.WriteLine("\t\t\t\tawait " + InterfaceName.ToLower() + "." + current.FunctionName + args + ";");
			}

			writer.WriteLine("\t\t\t\t}");
			writer.WriteLine("\t\t\t\tcatch  (Exception e)");
			writer.WriteLine("\t\t\t\t{");
			writer.WriteLine("\t\t\t\t\tConsole.WriteLine(e);");
			//writer.WriteLine("\t\t\t\t\tthrow;");
			writer.WriteLine("\t\t\t\t}");

			writer.WriteLine("\t\t\t});");
			writer.WriteLine();	
		}
		writer.WriteLine("\t\t}");
		writer.WriteLine("\t}");
		writer.WriteLine("}");
	}

}

