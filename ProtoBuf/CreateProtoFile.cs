using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using CodeGenerator;
using Humanizer;


	public static class CreateProtoFile
	{
		public static void GenerateProto(TextWriter writer,string prefix, List<Function> Functions)
		{
			writer.WriteLine("// Generated by the rpc compiler.  DO NOT EDIT!");
			writer.WriteLine();
			writer.WriteLine("import \"MessageData.proto\";");
			writer.WriteLine("import \"CommonData.proto\";");
			writer.WriteLine("package DataContract;");
			writer.WriteLine();
			foreach (Function current in Functions)
			{
				if (current.RetType != "void")
				{
					writer.WriteLine("message " + Utility.GetRetType(prefix,current) + " {");
					writer.WriteLine(string.Concat(new string[]
					{
						"    optional ",
						current.RetType,
						" ReturnValue = 1",
						TypeDef.EnumType.ContainsKey(current.RetType) ? ("[default = " + TypeDef.EnumType[current.RetType] + "]") : "",
						";"
					}));
					writer.WriteLine("}");
					writer.WriteLine();
				}
				writer.WriteLine("message " + Utility.GetArgType(prefix,current) + " {");
				int num = 1;
				foreach (Argument current2 in current.Args)
				{
					writer.WriteLine(string.Concat(new string[]
					{
						"    optional ",
						current2.Type,
						" ",
						current2.Name.Pascalize(),
						" = ",
						num.ToString(),
						";"
					}));
					num++;
				}
				writer.WriteLine("}");
				writer.WriteLine();
			}
		}

		public static void GenerateCSCode(string protoToolPath, string protoDir, string outDir)
		{
			DirectoryInfo protoDirInfo = new DirectoryInfo(protoDir);

			var fileInfos = protoDirInfo.GetFileSystemInfos("*.proto", SearchOption.AllDirectories);
			
			foreach (var info in fileInfos)
			{
				//for (int i = 0; i < 2; i++)
				{
					string strName = info.Name.Split('.')[0];
// 					if (strName == "DataBase")
// 					{
// 						continue;
// 					}
					

					var proExe = new Process();
					string strOut = "";
					string strArgs = "";
					//if (i == 0)
					{
						strOut = Path.Combine(outDir,strName + ".cs");

						strArgs = string.Format(" -i:{0} -o:{1} ", info.FullName, strOut);
					}
					Console.WriteLine("生成服务器的proto文件{0}->{1}" , info.FullName, strOut);

					ProcessStartInfo exeInfo = new ProcessStartInfo(protoToolPath, strArgs);
					exeInfo.WorkingDirectory = protoDir;
					exeInfo.RedirectStandardOutput = true;
					exeInfo.RedirectStandardError = true;
					exeInfo.RedirectStandardInput = true;
					exeInfo.UseShellExecute = false;
					exeInfo.CreateNoWindow = true;
					proExe.StartInfo = exeInfo;
					proExe.Start();

					proExe.OutputDataReceived += proExe_OutputDataReceived;
					proExe.ErrorDataReceived += proExe_OutputDataReceived;
					proExe.EnableRaisingEvents = true;
					proExe.BeginOutputReadLine();
					proExe.BeginErrorReadLine();
					while (!proExe.HasExited)
					{
						
					}
				}
			}
		}
		static void proExe_OutputDataReceived(object sender, DataReceivedEventArgs e)
		{
			Console.WriteLine(e.Data);
		}
	}

