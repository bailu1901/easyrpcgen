
package DataContract;

message FloatVector3
{
	required float X 		= 1;
	required float Y 		= 2;
	required float Z 		= 3;
}

message IntVector3
{
	required int32 X 		= 1;
	required int32 Y 		= 2;
	required int32 Z 		= 3;
}

// 玩家信息
message PlayerInfo
{
	optional int64					Id 				= 1;
	optional int32                  Sex             = 2;
	optional int32					Type 			= 3;
	optional string					Name			= 4;
	optional int64					TeamId			= 5;

	optional CharacterAvatarData	Avatar 	    	= 10;
}

// 方位定义
enum DirectionType
{
    None           = 0;  //无
	Forward        = 1;  //前
	Left           = 2;  //左
	Right          = 3;  //右
	Back           = 4;  //后
	LeftForward    = 5;  //左前
	RightForward   = 6;  //右前
	LeftBack       = 7;  //左后
	RightBack      = 8;  //右后
}

// 开火模式
enum FireMode
{
	Single         = 0; //单发
	Repeating      = 1; //点射
	Auto           = 2; //全自动
}

// 伤害类型
enum DamageType
{
    Invalid         = -1;       //无效
    Bullet          = 0;        //子弹
    Fist            = 1;        //拳击
    GrandeExplosion = 2;        //手雷爆炸
    Circle          = 3;        //缩圈
}

//玩家状态
enum PlayerGameState
{
	Normal 		= 0;
    Matching 	= 1;					//匹配
    Gaming	    = 2;					//游戏中
}

//玩家移动类型
enum PlayerMoveType
{
	Idle = 0; //站立
	Sneak = 1; //潜行
	Run = 2; //跑
	Sprint = 3; //冲刺
}

//玩家游泳动作类型
enum PlayerSwimmingType
{
	NotSwiming = -1; //非游泳状态
	Swim = 0; //游泳（漂浮）
	Crawl = 1; //向正前方游（自由泳）
	Breaststroke = 2; //侧向前游（蛙泳）
	Backstroke = 3; //向后游（仰泳）
}

message PlayerSampleInfo
{
	optional int64					Id 				= 1;
	optional int32					Type 			= 2;
	optional string					Name			= 3;
	optional PlayerGameState		State			= 4;
	optional bool					IsOnline		= 5;
	optional 	CharacterAvatarData	Avatar 	    	= 6;
	optional int32					Icon			= 7;
	optional int64					TeamId			= 8;
}

// 玩家详细信息
message UserDetailInfo
{	
	optional int32					Sex				= 1;
	optional int32					Age				= 2;
	optional int32					Star			= 3;
	optional int32					Blood			= 4;
	optional int32					Adress			= 5;
	optional int32					PhoneNum		= 6;
	optional string					Email			= 7;
	optional string					Desc			= 8;
}

// 玩家基础模型数据
// 1、保存到数据库
// 2、在登录大厅会显示
// 3、可以购买
message CharacterAvatarData
{
	required int32 AvatarId = 1;    // 模型ID
	required int32 SkinId = 2;      // 皮肤
    required int32 HairColorId = 3; // 头发颜色
	repeated int32 EquipIds = 4;    // 挂载在身上
}

// 玩家战斗内的模型数据
// 1、进入战斗后使用，从CharacterAvatarData初始化
// 2、用于广播玩家模型
message BattleAvatarInfo
{
	required CharacterAvatarData BaseAvatarData = 1; // 基础数据
	optional int32 CurrentUseWeaponId           = 2; // 手上的武器
	optional int32 UseWeaponSlot                = 3; // 武器的挂点
	repeated Dict_int_ItemData Weapons          = 4; // 武器装备表
}

// 武器装备字典定义
message Dict_int_ItemData
{

}

// 玩家行为状态
message PlayerActionState
{
	required bool IsCrouching 		= 1; // 蹲
	required bool IsGrounded 		= 2; // 在地面上
	required bool IsProne 			= 3; // 趴
	required bool IsAttacking 		= 4; // 攻击
	required int32 AttackRandomIndex= 5; // 随机攻击动画
	required PlayerMoveType MoveType= 6; // 移动类型
	required PlayerSwimmingType SwimmingType= 7; // 游泳状态
}

// 玩家信息集合
message PlayerInfoList
{
	repeated PlayerInfo Infos 		= 1;
}

message Int64Array
{
	repeated int64 Items				= 1; 
}

message Int64ArrayList
{
	repeated Int64Array Items				= 1; 
}

message Uint64Array
{
	repeated uint64 Items				= 1; 
}

message Int32Array
{
	repeated int32 Items				= 1;
}

// 玩家头像信息
message PlayerHeadInfoMsg
{
	required int64		 CharacterId	= 1;
	required string		 Name			= 2;
	required int32		 RoleId			= 3;
	required int32		 Level			= 4;	
	required int32 		 Ladder			= 5;
	required int32 		 FightValue		= 6;
}

message PlayerHeadInfoMsgList
{
	repeated PlayerHeadInfoMsg		 Characters	= 1;
}


message StringArray
{
	repeated string Items				= 1;
}

message ChatMessages
{
    repeated ChatMessage Messages       = 1;
}

message ChatMessage
{
    required int32 chatType             = 1;
    required string Content             = 2;
    required uint64 characterId         = 3;
    optional string characterName       = 4;
	optional bytes SoundData            = 5;
}

message ChatMessageContent
{
    required string Content             = 1;
	optional bytes SoundData            = 2;
	optional int32 Vip					= 3;
	optional int32 Ladder			    = 4;
}

message Dict_int_int
{
}

message Dict_int_string
{
}

message Dict_int_Uint64Array
{
}

message Dict_ulong_int
{
}

message Dict_long_int
{
}

message Dict_int_float
{
}

message Dict_int_int_Data
{
	repeated Dict_int_int 				Data		= 1;
}

message Dict_int_float_Data
{
    repeated Dict_int_float Data = 1;
}


message Compensation
{
	required int32 						Id  		= 1;	//Type
	repeated Dict_int_int 				Data		= 2;
	optional int32 						Count  		= 3;
}


message Dict_int_Compensation
{
}


message CompensationList
{
	repeated Dict_int_Compensation		Compensations	= 1;
}


message Vector2Int32
{
	required int32 x					= 1;	
	required int32 y					= 2;
}

message PositionData
{
	required Vector2Int32   Pos			= 1;	
	required Vector2Int32   Dir			= 2;	
	optional int64         Time		= 3;	
}

message FloatVector3List
{
    repeated FloatVector3 Positions = 1;
}

// 物品扩展数据类型
enum ItemDataType
{
    BulletNum      = 0;  // 子弹数
    GunBulletNum   = 1;  // 枪上拥有的子弹数
    FireModeType   = 2;  // 开火模式
}

message Dict_ItemDataType_int
{

}


// 物品数据类
message ItemData
{
    required int64 Id = 1;
    required int32 ItemId = 2;
    repeated Dict_ItemDataType_int ExtraData = 3;
    repeated ItemData AddOns = 4;
}

// 场景物品
message SceneItemData
{
    required ItemData ItemData = 1;
    required FloatVector3 Position = 2;
}

message SceneItems
{
    repeated SceneItemData Items = 1;
}

message SceneBoxItem
{
    required int64 Id = 1;
    required string Name = 2;
    required FloatVector3 Position = 3;
    repeated ItemData Items = 4;
    optional DropBoxType BoxType = 5;
}

message Vec2Array
{
	repeated Vector2Int32 List = 1;
}

// 玩家行为类型
enum PlayerActionType
{
	SkyDive                            = 0;   //跳伞
	OpenParachute                      = 1;   //开启降落伞
	CloseParachute                     = 2;   //关闭降落伞
	StartJump                          = 3;   //跳跃
	OnLanded                           = 4;   //落地
	ToRescue						   = 5;   //救援
	SwitchFireMode                     = 6;   //切换开火模式
	SwitchWeapon                       = 7;   //切换武器
	UseItem                            = 8;   //使用物品
}

message CircleInfo
{
	required int32                  Index		    = 1;
	required float                  Radius			= 2; 
	required float                  CenterX			= 3;
	required float                  CenterY			= 4;
}

message CircleList
{
	repeated 	CircleInfo 		SafeCiecle 		= 1;
	repeated 	CircleInfo 		DanagerCiecle 	= 2;
}

// 单个好友信息
message FriendUnit
{
    required int64 Id = 1;
    optional string Name = 2;
    optional PlayerGameState State = 3;
    optional int32 Icon = 4;
	optional bool IsOnline = 5;
}

//单个队员信息
message TeamMemUnit
{
    required int64 Id = 1;
    optional string Name = 2;
	optional int32 Icon = 3;
    optional bool IsOnline = 4;
    optional bool IsReady = 5;
	
	optional 	CharacterAvatarData	Avatar 	    = 6;
}
message TeamInfo
{
	required	int64			LeaderId		= 1;
	optional	int32			MatchType		= 2;
	optional	bool			IsAutoAdd		= 3;
    repeated 	TeamMemUnit		Members 		= 4;
}



// 玩家战斗属性
message PlayerBattleAttribute
{
	required int32                HP = 1; //血量
	required int32                Energy = 2; //能量
}

// 战斗信息
message BattleInfo
{
	optional int64 Id = 1; 
	optional int32 MatchMode = 2;
    repeated FightPlayerUnit Fighters = 3;
}


//战斗单位
message FightPlayerUnit
{
    required int64 Id = 1;
    optional string Name = 2;
    optional int64 TeamId = 3;
}

// 掉落宝箱类型
enum DropBoxType
{
    Player = 0; // 玩家死亡
    Supply = 1; // 补给
}

// 货币
enum MoneyType
{
    Gold = 0;       // 金币
    Diamond = 1;    // 钻石
}

message Dict_MoneyType_long
{
}

// 货币
message Money
{
    repeated Dict_MoneyType_long Moneys = 1;
}

// 统计
enum StatisticsType
{
    BaojiTimes 		= 0;         	// 暴击次数
    HitTimes		= 1;            // 击中次数
    KillDownTimes	= 2;      		// 击倒别人次数
    KillDieTimes	= 3;       		// 杀死别人次数
    KillDieOneLife	= 4;     		// 一条命杀多少人
    Score			= 5;            // 击败得分
    MaxKillDistance = 6;    		// 最远击杀距离
    Damage			= 7;            // 总伤害
    liveTime		= 8;            // 存活时间
    Rank			= 9;            // 是否胜利
    StartTime		= 10;          	// 开始时间
    DieTime         = 11;   		// 死亡时间
	KillTenTimes	= 12;			// 击杀10人的局数
	ZaiJuDistance   = 13;			// 载具移动
	MoveDistance	= 14;			// 移动距离
	TotleDistance   = 15;			// 总移动距离
}

message Dict_int_ulong
{

}

message StatisticsInfo
{
	repeated Dict_int_ulong	Dict	=	1;
}

message ClientStatisticsInfo
{
    optional	uint64	HitTimes				= 1;            // 击中次数
    optional	uint64	KillDieTimes			= 2;       		// 杀死别人次数
    optional	uint64	KillDieOneLife			= 3;     		// 一条命杀多少人
    optional	uint64	MaxKillDistance 		= 4;    		// 最远击杀距离
    optional	uint64	Damage					= 5;            // 总伤害
    optional	int32	MaxLiveTime				= 6;            // 存活时间
	optional	uint64	TotleLiveTime			= 7;			// 存活时间列表
    optional	uint64 	WinTimes				= 8; 			// 赢了多少局
	optional	uint64	TotleTimes 				= 9;			// 总局数
	optional	uint64	TenRankTimes			= 10;			// 前10局的次数
	optional	uint64	BaoJiTimes				= 11;           // 暴击次数
	optional	uint64	KillTenTimes			= 12;           // 击杀10人的局数
	optional	uint64	ZaiJuDistance   		= 13;			// 载具移动
	optional	uint64	MoveDistance			= 14;			// 移动距离
	optional	uint64	TotleDistance   		= 15;			// 总移动距离
	optional	uint64	MaxZaiJuDistance		= 16;			// 最大载具移动距离
	optional	uint64	MaxMoveDistance			= 17;			// 最大步行移动距离
	optional	uint64	MaxTotleDistance		= 18;			// 最大总移动距离
}

// 衣柜物品
message WardrobeItem
{
    required int32 ItemId = 1;
    optional int32 ItemCount = 2;
}

// 衣柜物品列表
message WardrobeItemList
{
    repeated WardrobeItem ItemList = 1;
}

// 衣柜物品部位列表
message Dict_int_WardrobeItemList
{
}

message Dict_int_WardrobeItemData
{
    repeated Dict_int_WardrobeItemList Items = 1;
}
